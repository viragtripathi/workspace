/**
 * @description 
 * @author vtripath-win7vm
 */
rule Rules.Baggage.ProcessLOADEDBaggage {
	attribute {
		priority = 5;
		forwardChain = true;
	}
	declare {
		
		Concepts.Baggage baggage;
	}
	when {
		baggage.EventType == Scorecards.BagggageEventTypes.LOADED;
			baggage.isModified==true;
	}
	then {
		System.debugOut("Baggage LOADED event received");
		String flightKey = baggage.OriginalFlightKey;
		//need to load the flight concept
		System.debugOut("Rules.Baggage.ProcessLOADEDBaggage: flightKey = " + flightKey);
		
		Concepts.Flight  flight = RuleFunctions.Loaders.LoadFlightFromAS(flightKey);
		if (flight != null){
			System.debugOut("Rules.Baggage.ProcessLOADEDBaggage: baggage:flight loaded for flightKey = " + flightKey);
		
			// then need to increment the counter for loaded bags
			flight.TotalBagsLoaded=flight.TotalBagsLoaded+1;
			flight.isModified=true;
		}else
			System.debugOut("Rules.Baggage.ProcessLOADEDBaggage: baggage:flight NOT loaded for flightKey = " + flightKey);
		
	}
}