/**
 * @description 
 * @author vtripath-win7vm
 */
rule Rules.Baggage.ProcessCHECKED_INBaggage {
	attribute {
		priority = 5;
		forwardChain = true;
	}
	declare {
		
		Concepts.Baggage baggage;
	}
	when {
		baggage.EventType == Scorecards.BagggageEventTypes.CHECKED_IN;
	baggage.isModified==true;
	}
	then {
		System.debugOut("Baggage CHECKED_IN event received");
		String flightKey = baggage.OriginalFlightKey;
		//need to load the flight concept
		System.debugOut("Rules.Baggage.ProcessCHECKED_INBaggage: flightKey = " + flightKey);
			
		// need to load the Flight Concept
		Concepts.Flight flight = RuleFunctions.Loaders.LoadFlightFromAS(flightKey);
		System.debugOut("Rules.Baggage.ProcessCHECKED_INBaggage: baggage:flight loaded for flightKey = " + flightKey);		
		// then increment the counter for the totalbags checked in
		if (flight !=null){
			flight.TotalBagsCheckedIn=flight.TotalBagsCheckedIn+1;
			flight.isModified=true;
			System.debugOut("Total bags checked in for "+flight.FlightKey + " are " + flight.TotalBagsCheckedIn);
		}else{
			System.debugOut(" Could not retrieve flight from cache for " + flightKey);
		}
		
		
		// at this point an outbound event could be sent if a realtime client is interested in real time bag related flight data
		
	}
}