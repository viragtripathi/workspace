/**
 * @description 
 * @author vtripath-win7vm
 */
rule Rules.Flight.ProcessCLOSEDFlight {
	attribute {
		priority = 5;
		forwardChain = true;
	}
	declare {
		
		Concepts.Flight flight;
	}
	when {
		flight.EventType == Scorecards.FlightEventTypes.CLOSED;
				flight.isModified==true;
	}
	then {
		System.debugOut("Flight CLOSED event received");
		
		// Will need to get all the bags that have a status != loaded
		Concepts.Baggage[] bags = RuleFunctions.Query.QueryAllBags("EventType != 'LOADED'AND OriginalFlightKey='"+flight.FlightKey+"'");
		//store these bag tags in an array
		Object arr = Collections.List.createArrayList();
		Object arrbagsloaded = Collections.List.createArrayList();
		
		for (int i=0; i <bags@length;i++){
		
			//extract information for each bag
			Concepts.Baggage bag = bags[i];
			if (bag != null){
				String flightKey = bag.OriginalFlightKey;
				String recordLocator = bag.RecordLocator;
				Collections.List.add(arr,i,bag.BagTagId);
				
				System.debugOut("Need to load the passenger for flight : " +flightKey + " and PNR " + recordLocator);
				Concepts.Passenger pax =RuleFunctions.Loaders.LoadPassengerFromAS(flightKey, recordLocator);
				if (pax !=null){
					System.debugOut("Loaded Passenger " + pax.RecordLocator);
					String eventType = Scorecards.PassengerEventTypes.BAGNOTLOADED;
					pax.IsModified=false;
					//create an outbound passenger event
					Events.PassengerEventInbound paxEvent = Event.createEvent("xslt://{{/Events/PassengerEventInbound}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:pnr=\"http://www.schemas.skyteam.com/2016/09/enterprise/Passenger\" version=\"2.0\"><xsl:param name=\"flightKey\"/><xsl:param name=\"pax\"/><xsl:param name=\"eventType\"/><xsl:template name=\"Function\" match=\"/\"><createEvent><event><FlightKey><xsl:value-of select=\"$flightKey\"/></FlightKey><payload><pnr:Passenger><pnr:EventType><xsl:value-of select=\"$eventType\"/></pnr:EventType><pnr:FlightKey><xsl:value-of select=\"$pax/FlightKey\"/></pnr:FlightKey><pnr:AirlineCode><xsl:value-of select=\"$pax/AirlineCode\"/></pnr:AirlineCode><pnr:FlightSegments><xsl:value-of select=\"$pax/FlightSegments\"/></pnr:FlightSegments><pnr:BagTags><xsl:value-of select=\"$pax/BagTags\"/></pnr:BagTags><pnr:FlightNumber><xsl:value-of select=\"$pax/FlightNumber\"/></pnr:FlightNumber><pnr:RecordLocator><xsl:value-of select=\"$pax/RecordLocator\"/></pnr:RecordLocator><pnr:CutomerId><xsl:value-of select=\"$pax/CutomerId\"/></pnr:CutomerId><pnr:BookingId><xsl:value-of select=\"$pax/BookingId\"/></pnr:BookingId><pnr:FirstName><xsl:value-of select=\"$pax/FirstName\"/></pnr:FirstName><pnr:LastName><xsl:value-of select=\"$pax/LastName\"/></pnr:LastName><pnr:EmailAddress><xsl:value-of select=\"$pax/EmailAddress\"/></pnr:EmailAddress><pnr:PhoneNumber><xsl:value-of select=\"$pax/PhoneNumber\"/></pnr:PhoneNumber><pnr:SeatNo><xsl:value-of select=\"$pax/SeatNo\"/></pnr:SeatNo><pnr:FrequentFlyerStaus><xsl:value-of select=\"$pax/FrequentFlyerStaus\"/></pnr:FrequentFlyerStaus><pnr:OriginLocalDate><xsl:value-of select=\"$pax/OriginLocalDate\"/></pnr:OriginLocalDate><pnr:OriginStnCode><xsl:value-of select=\"$pax/OriginStnCode\"/></pnr:OriginStnCode><pnr:DestStnCode><xsl:value-of select=\"$pax/DestStnCode\"/></pnr:DestStnCode></pnr:Passenger></payload></event></createEvent></xsl:template></xsl:stylesheet>");
					Event.routeTo(paxEvent,"/Channels/OutboundJMS/passengerEventOutbound",null);
				}
			}else{
				System.debugOut("Done processing all bags that were not loaded");
				break;
			}
		}
		//do we need to get all the passengers that are not on board but the bags are on board?
				// Will need to get all the pax that have a status != ONBOARD
		Concepts.Passenger[] paxs = RuleFunctions.Query.QueryAllPassengers("EventType != 'ONBOARD' AND FlightKey='"+flight.FlightKey+"'");
		System.debugOut("Flight " + flight.FlightKey + " has total of " +paxs@length + " Passengers Not Onboard");
		
		for (int j=0; j < paxs@length; j++){
			Concepts.Passenger pax = paxs[j];
			if (pax != null){
				String flightKey = pax.FlightKey;
				String recordLocator = pax.RecordLocator;
				
				//need to get the bags for this record locator
				String filter = "RecordLocator = '"+ recordLocator+"'";
				Concepts.Baggage[] paxbags = RuleFunctions.Query.QueryAllBags(filter);
				System.debugOut("Total Bags for recordLocator " + recordLocator + " = "+paxbags@length);	
				
				int counter =0;
				for (int k=0 ;k < paxbags@length; k++){
					if(paxbags[k].EventType=="LOADED"){
						//since the pax is not onboard, we need to get the list of bags that are not loaded
						Collections.List.add(arrbagsloaded,counter,paxbags[k].BagTagId); 
						System.debugOut("Bag Loaded "  +paxbags[k].BagTagId); 
						counter++;						
					}
					else
						System.debugOut("Bag Not Loaded "  +paxbags[k].BagTagId); 
				}			
			}
		}
		
		//need to send the flight information out
		System.debugOut("Flight: " + flight.FlightKey + " has TotalBagsCheckedIn" + flight.TotalBagsCheckedIn);
		Object [] bagsNotOn = Collections.toArray(arr);
		Object [] bagOnPaxNotOn = Collections.toArray(arrbagsloaded);
		
		//send an outbound flight event with mishandled details
		Events.FlightEventInbound fltEvent = Event.createEvent("xslt://{{/Events/FlightEventInbound}}<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<xsl:stylesheet xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\" xmlns:fl=\"http://www.schemas.skyteam.com/2016/09/enterprise/Flight\" version=\"2.0\"><xsl:param name=\"flight\"/><xsl:param name=\"bagsNotOn\"/><xsl:param name=\"bagOnPaxNotOn\"/><xsl:template name=\"Function\" match=\"/\"><createEvent><event><payload><fl:Flight><fl:EventType><xsl:value-of select=\"$flight/EventType\"/></fl:EventType><fl:FlightKey><xsl:value-of select=\"$flight/FlightKey\"/></fl:FlightKey><fl:FlightSegmentNumber><xsl:value-of select=\"$flight/FlightSegmentNumber\"/></fl:FlightSegmentNumber><fl:AirlineCode><xsl:value-of select=\"$flight/AirlineCode\"/></fl:AirlineCode><fl:FlightNumber><xsl:value-of select=\"$flight/FlightNumber\"/></fl:FlightNumber><fl:FlightDate><xsl:value-of select=\"$flight/FlightDate\"/></fl:FlightDate><fl:OriginStnCode><xsl:value-of select=\"$flight/OriginStnCode\"/></fl:OriginStnCode><fl:DestStnCode><xsl:value-of select=\"$flight/DestStnCode\"/></fl:DestStnCode><fl:SegmentStatus><xsl:value-of select=\"$flight/SegmentStatus\"/></fl:SegmentStatus><fl:InternationalDomesticFlag><xsl:value-of select=\"$flight/InternationalDomesticFlag\"/></fl:InternationalDomesticFlag><fl:EquipmentType><xsl:value-of select=\"$flight/EquipmentType\"/></fl:EquipmentType><fl:ScheduledDepartureTime><xsl:value-of select=\"$flight/ScheduledDepartureTime\"/></fl:ScheduledDepartureTime><fl:ScheduledArrivalTime><xsl:value-of select=\"$flight/ScheduledArrivalTime\"/></fl:ScheduledArrivalTime><fl:EstimatedDepartureTime><xsl:value-of select=\"$flight/EstimatedDepartureTime\"/></fl:EstimatedDepartureTime><fl:EstimatedArrivalTime><xsl:value-of select=\"$flight/EstimatedArrivalTime\"/></fl:EstimatedArrivalTime><fl:DepartureGate><xsl:value-of select=\"$flight/DepartureGate\"/></fl:DepartureGate><fl:ArrivalGate><xsl:value-of select=\"$flight/ArrivalGate\"/></fl:ArrivalGate><fl:TotalBagsCheckedIn><xsl:value-of select=\"$flight/TotalBagsCheckedIn\"/></fl:TotalBagsCheckedIn><fl:TotalBagsLoaded><xsl:value-of select=\"$flight/TotalBagsLoaded\"/></fl:TotalBagsLoaded><fl:TotalBagsRerouted><xsl:value-of select=\"$flight/TotalBagsRerouted\"/></fl:TotalBagsRerouted><fl:TotalBagsDelivered><xsl:value-of select=\"$flight/TotalBagsDelivered\"/></fl:TotalBagsDelivered><fl:BagsNotLoaded><xsl:for-each select=\"$bagsNotOn/elements\"><fl:BagTagID><xsl:value-of select=\".\"/></fl:BagTagID></xsl:for-each></fl:BagsNotLoaded><fl:PaxNotOnBagLoaded><xsl:for-each select=\"$bagOnPaxNotOn/elements\"><fl:BagTagIDLoaded><xsl:value-of select=\".\"/></fl:BagTagIDLoaded></xsl:for-each></fl:PaxNotOnBagLoaded></fl:Flight></payload></event></createEvent></xsl:template></xsl:stylesheet>");
		Event.routeTo(fltEvent,"/Channels/OutboundJMS/flightEventOutbound",null);
		
		
	}
}